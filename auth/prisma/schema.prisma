generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model Account {
    id              String   @id
    name            String
    email           String   @unique
    password_hash   String
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt
    enabled         Boolean  @default(true)
    sessions        AccountSession[]
    projects        Project[]
}

model AccountSession {
    id         BigInt  @id
    user_id    String
    user    Account @relation(fields: [user_id], references: [id], onDelete: Cascade)
    created_at DateTime @default(now())
    ip         String?
    os         String?
    browser    String?
    location   String?
    tokenData  AccountTokenData[]
}

model AccountTokenData {
    id         BigInt  @id
    session_id BigInt
    session    AccountSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
    iteration  Int     @default(1)
    valid      Boolean @default(true)
    expires    DateTime
    @@unique([id, iteration])
}

model AccountKeystore {
    id          Int     @id @default(0)
    iv          String
    public_key  String  @db.Text
    private_key String  @db.Text
}

model Project {
    id         String   @id
    account_id String
    account    Account @relation(fields: [account_id], references: [id], onDelete: Cascade)
    name       String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    users      User[]
    keystore   ProjectKeystore?
}

model ProjectKeystore {
    project_id  String @id
    iv          String
    public_key  String  @db.Text
    private_key String  @db.Text
    api_key     String  @default(cuid())
    project     Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
}


model User {
    id              String   @id
    project_id      String
    project         Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
    name            String
    email           String   @unique
    password_hash   String
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt
    enabled         Boolean  @default(true)
    verified        Boolean  @default(false)
    sessions        UserSession[]
}

model UserSession {
    id         BigInt  @id
    user_id    String
    user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
    created_at DateTime @default(now())
    ip         String?
    os         String?
    browser    String?
    location   String?
    tokenData  UserTokenData[]
}

model UserTokenData {
    id         BigInt @id
    session_id BigInt
    session    UserSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
    iteration  Int     @default(1)
    valid      Boolean @default(true)
    expires    DateTime
    @@unique([id, iteration])
}